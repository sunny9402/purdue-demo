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
securityContext:
          runAsUser: 472
          fsGroup: 472
https://grafana.com/docs/grafana/latest/setup-grafana/installation/kubernetes/
https://grafana.com/docs/grafana-cloud/monitor-infrastructure/kubernetes-monitoring/configuration/configure-infrastructure-manually/prometheus/prometheus-operator/
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm install grafana grafana/grafana
kubectl expose service grafana — type=NodePort — target-port=3000 — name=grafana-ext
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: /path/to/prometheus/data


helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prometheus prometheus-community/prometheus
kubectl expose service prometheus-server --type=NodePort --target-port=9090 --name=prometheus-server-ext

sudo apt-get update
sudo apt-get install jenkins
https://github.com/yankils/DevOps/blob/master/jenkins/pipeline-templates/maven-build
-B package --file pom.xml
FROM tomcat:8
COPY target/java-example.war /usr/local/tomcat/webapps/ROOT.war
EXPOSE 8080
CMD ["catalina.sh", "run"]
ssunnysingh/pgpedureka:tagname

FROM tomcat:8.0-alpine
LABEL maintainer="deepak@softwareyoga.com"

ADD sample.war /usr/local/tomcat/webapps/

---
- hosts: kubernetes
#  become: ture
  user: root

  tasks:
    - name: deploy regapp on kubernetes
      command: kubectl apply -f regapp-deployment.yml

    - name: create service for regapp
      command: kubectl apply -f regapp-service.yml

    - name: update deployment with new pods if image updated in docker hub
      command: kubectl rollout restart deployment.apps/valaxy-regapp

kubectl config set-context my-context --cluster=my-cluster --user=my-user --namespace=my-namespace


---
- name: Docker build, login, and push
  hosts: localhost
  gather_facts: false
  vars:
    docker_registry_username: "your_docker_username"
    docker_registry_password: "your_docker_password"
    docker_image_name: "your_image_name"
    docker_image_tag: "latest"
    dockerfile_path: "/path/to/your/dockerfile"
    docker_registry_url: "docker.io"  # or your custom registry URL
  tasks:
    - name: Docker build
      shell: "docker build -t {{ docker_image_name }}:{{ docker_image_tag }} {{ dockerfile_path }}"
      register: docker_build_output
      changed_when: false

    - name: Docker login
      shell: "echo {{ docker_registry_password }} | docker login -u {{ docker_registry_username }} --password-stdin {{ docker_registry_url }}"
      register: docker_login_output
      changed_when: false

    - name: Docker push
      shell: "docker push {{ docker_image_name }}:{{ docker_image_tag }}"
      register: docker_push_output
      changed_when: false

